buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven'

ext.configFile = file("..//common//common-1.14.properties")
ext.config = parseConfig(configFile)

version = "${config.mc_version}-${mod_version}.${mod_subversion}"
group = "${mod_group}"
archivesBaseName = "${mod_archivename}"

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDirs += 'src/main/resources'
        }	
	}
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: "${config.mapping_channel}", version: "${config.mapping_version}"

    runs {
        client {
            workingDirectory project.file('run')
			properties 'fml.earlyprogresswindow': 'false'

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
				immersivetechnology {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                immersivetechnology {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
	// JEI
    // maven { url = "http://dvs1.progwml6.com/files/maven/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.mc_version}-${config.forge_version}"
	
    // compileOnly fg.deobf("mezz.jei:jei-${config.mc_version}:${config.jei_version}:api")
    // runtimeOnly fg.deobf("mezz.jei:jei-${config.mc_version}:${config.jei_version}")
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": "${mod_id}",
            "Specification-Vendor": "${mod_author}",
            "Specification-Version": "${mod_subversion}",
            "Implementation-Title": "${mod_id}",
            "Implementation-Version": "${mod_version}",
            "Implementation-Vendor" :"${mod_author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}